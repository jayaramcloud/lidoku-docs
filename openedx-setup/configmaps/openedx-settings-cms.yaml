apiVersion: v1
kind: ConfigMap
metadata:
  name: openedx-settings-cms-b5844m62d4
  namespace: openedx
  uid: ba9b9a58-55b4-4233-8578-9082578eb0c9
  resourceVersion: '51859147'
  creationTimestamp: '2025-01-18T18:17:00Z'
  labels:
    app.kubernetes.io/instance: openedx-zd6XGmYUygmsdAIOtBuNIxp0
    app.kubernetes.io/managed-by: tutor
    app.kubernetes.io/name: openedx
    app.kubernetes.io/part-of: openedx
  annotations:
    app.kubernetes.io/version: 19.0.1
data:
  __init__.py: ''
  development.py: >
    # -*- coding: utf-8 -*-

    import os

    from cms.envs.devstack import *


    ####### Settings common to LMS and CMS

    import json

    import os


    from xmodule.modulestore.modulestore_settings import
    update_module_store_settings


    # Mongodb connection parameters: simply modify `mongodb_parameters` to
    affect all connections to MongoDb.

    mongodb_parameters = {
        "db": "openedx",
        "host": "mongodb",
        "port": 27017,
        "user": None,
        "password": None,
        # Connection/Authentication
        "connect": False,
        "ssl": False,
        "authsource": "admin",
        "replicaSet": None,
        
    }

    DOC_STORE_CONFIG = mongodb_parameters

    CONTENTSTORE = {
        "ENGINE": "xmodule.contentstore.mongo.MongoContentStore",
        "ADDITIONAL_OPTIONS": {},
        "DOC_STORE_CONFIG": DOC_STORE_CONFIG
    }

    # Load module store settings from config files

    update_module_store_settings(MODULESTORE,
    doc_store_settings=DOC_STORE_CONFIG)

    DATA_DIR = "/openedx/data/modulestore"


    for store in MODULESTORE["default"]["OPTIONS"]["stores"]:
       store["OPTIONS"]["fs_root"] = DATA_DIR

    # Behave like memcache when it comes to connection errors

    DJANGO_REDIS_IGNORE_EXCEPTIONS = True


    # Meilisearch connection parameters

    MEILISEARCH_ENABLED = True

    MEILISEARCH_URL = "http://meilisearch:7700"

    MEILISEARCH_PUBLIC_URL = "https://meilisearch.lms.lidoku.com"

    MEILISEARCH_INDEX_PREFIX = "tutor_"

    MEILISEARCH_API_KEY =
    "2e08fe0c4e82fb0a9a7740e3fec5b81c746ed8f0f50f8d1ee9ae5538e9582e15"

    MEILISEARCH_MASTER_KEY = "IW3WJpg8EWM2DxQ9gsrfQHEP"

    SEARCH_ENGINE = "search.meilisearch.MeilisearchEngine"


    # Common cache config

    CACHES = {
        "default": {
            "KEY_PREFIX": "default",
            "VERSION": "1",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "general": {
            "KEY_PREFIX": "general",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "mongo_metadata_inheritance": {
            "KEY_PREFIX": "mongo_metadata_inheritance",
            "TIMEOUT": 300,
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "configuration": {
            "KEY_PREFIX": "configuration",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "celery": {
            "KEY_PREFIX": "celery",
            "TIMEOUT": 7200,
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "course_structure_cache": {
            "KEY_PREFIX": "course_structure",
            "TIMEOUT": 604800, # 1 week
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "ora2-storage": {
            "KEY_PREFIX": "ora2-storage",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        }
    }


    # The default Django contrib site is the one associated to the LMS domain
    name. 1 is

    # usually "example.com", so it's the next available integer.

    SITE_ID = 2


    # Contact addresses

    CONTACT_MAILING_ADDRESS = "Lindokedx - https://lms.lidoku.com"

    DEFAULT_FROM_EMAIL = ENV_TOKENS.get("DEFAULT_FROM_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    DEFAULT_FEEDBACK_EMAIL = ENV_TOKENS.get("DEFAULT_FEEDBACK_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    SERVER_EMAIL = ENV_TOKENS.get("SERVER_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    TECH_SUPPORT_EMAIL = ENV_TOKENS.get("TECH_SUPPORT_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    CONTACT_EMAIL = ENV_TOKENS.get("CONTACT_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    BUGS_EMAIL = ENV_TOKENS.get("BUGS_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    UNIVERSITY_EMAIL = ENV_TOKENS.get("UNIVERSITY_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    PRESS_EMAIL = ENV_TOKENS.get("PRESS_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    PAYMENT_SUPPORT_EMAIL = ENV_TOKENS.get("PAYMENT_SUPPORT_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    BULK_EMAIL_DEFAULT_FROM_EMAIL =
    ENV_TOKENS.get("BULK_EMAIL_DEFAULT_FROM_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    API_ACCESS_MANAGER_EMAIL = ENV_TOKENS.get("API_ACCESS_MANAGER_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    API_ACCESS_FROM_EMAIL = ENV_TOKENS.get("API_ACCESS_FROM_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])


    # Get rid completely of coursewarehistoryextended, as we do not use the CSMH
    database

    INSTALLED_APPS.remove("lms.djangoapps.coursewarehistoryextended")

    DATABASE_ROUTERS.remove(
        "openedx.core.lib.django_courseware_routers.StudentModuleHistoryExtendedRouter"
    )


    # Set uploaded media file path

    MEDIA_ROOT = "/openedx/media/"


    # Video settings

    VIDEO_IMAGE_SETTINGS["STORAGE_KWARGS"]["location"] = MEDIA_ROOT

    VIDEO_TRANSCRIPTS_SETTINGS["STORAGE_KWARGS"]["location"] = MEDIA_ROOT


    GRADES_DOWNLOAD = {
        "STORAGE_TYPE": "",
        "STORAGE_KWARGS": {
            "base_url": "/media/grades/",
            "location": "/openedx/media/grades",
        },
    }


    # ORA2

    ORA2_FILEUPLOAD_BACKEND = "filesystem"

    ORA2_FILEUPLOAD_ROOT = "/openedx/data/ora2"

    FILE_UPLOAD_STORAGE_BUCKET_NAME = "openedxuploads"

    ORA2_FILEUPLOAD_CACHE_NAME = "ora2-storage"


    # Change syslog-based loggers which don't work inside docker containers

    LOGGING["handlers"]["local"] = {
        "class": "logging.handlers.WatchedFileHandler",
        "filename": os.path.join(LOG_DIR, "all.log"),
        "formatter": "standard",
    }

    LOGGING["handlers"]["tracking"] = {
        "level": "DEBUG",
        "class": "logging.handlers.WatchedFileHandler",
        "filename": os.path.join(LOG_DIR, "tracking.log"),
        "formatter": "standard",
    }

    LOGGING["loggers"]["tracking"]["handlers"] = ["console", "local",
    "tracking"]


    # Silence some loggers (note: we must attempt to get rid of these when
    upgrading from one release to the next)

    LOGGING["loggers"]["blockstore.apps.bundles.storage"] = {"handlers":
    ["console"], "level": "WARNING"}


    # These warnings are visible in simple commands and init tasks

    import warnings


    # REMOVE-AFTER-V20: check if we can remove these lines after upgrade.

    from django.utils.deprecation import RemovedInDjango50Warning,
    RemovedInDjango51Warning

    # RemovedInDjango5xWarning: 'xxx' is deprecated. Use 'yyy' in 'zzz' instead.

    warnings.filterwarnings("ignore", category=RemovedInDjango50Warning)

    warnings.filterwarnings("ignore", category=RemovedInDjango51Warning)

    # DeprecationWarning: 'imghdr' is deprecated and slated for removal in
    Python 3.13

    warnings.filterwarnings("ignore", category=DeprecationWarning,
    module="pgpy.constants")


    # Email

    EMAIL_USE_SSL = False

    # Forward all emails from edX's Automated Communication Engine (ACE) to
    django.

    ACE_ENABLED_CHANNELS = ["django_email"]

    ACE_CHANNEL_DEFAULT_EMAIL = "django_email"

    ACE_CHANNEL_TRANSACTIONAL_EMAIL = "django_email"

    EMAIL_FILE_PATH = "/tmp/openedx/emails"


    # Language/locales

    LANGUAGE_COOKIE_NAME = "openedx-language-preference"


    # Allow the platform to include itself in an iframe

    X_FRAME_OPTIONS = "SAMEORIGIN"



    JWT_AUTH["JWT_ISSUER"] = "https://lms.lidoku.com/oauth2"

    JWT_AUTH["JWT_AUDIENCE"] = "openedx"

    JWT_AUTH["JWT_SECRET_KEY"] = "4PusB1OKkVSa17jgaLJZ7yh8"

    JWT_AUTH["JWT_PRIVATE_SIGNING_JWK"] = json.dumps(
        {
            "kid": "openedx",
            "kty": "RSA",
            "e": "AQAB",
            "d": "RH_AE1p9ffbwZZxozQnYvfnrEa_crRmy35YhMiESE_xkmashgjkCOWqaqryBwaqrudjIRQ4Nx_tRIL1QZhTsg4tYFy-ioBnt_mAya_RilSlYDAPLyMS07aLACjZXVJD9U2eNeOknCkg8DLFukVzWQ9wJ30TtOul593qI_3gDWqK85841aGklBwj98EENZB9cAhOIPf5dTutjcUMoHkEJz1APCPtBdqbxAfdAHmy4s9218aRdDOcWEVqGBflRJBdZg0H0OnI0n884qIh1mHrjpbCQJIKqsAKsEEVlW-hfELOcK2zeqja6dW5MWlNS9JJ6sXZnugbRGRZ4-cwCvU6jKQ",
            "n": "n3sLUIAOxgbXonraCzXT_9ehTgxMjDjJG8GefdVZTuFrsCXvQqPLmgEJm1ppm0Fki0JPDC4wdKMqK-l-Ei7JjkNsSuZFIjo95lGoRrUqo8pj2fKFKo61IN-hPpUbz12gYmj564ZjbwcWbSD6mJTa0a9GbijNY0po53oPpHuHSTn9e8c4jshA7AoJN2DH9bjVkf0iQd3xYSr6033tnT4el1otiTfMZ2zVxmYLMZgdooJH25LW92vU9EPKD-xNfOG5Nzj9sPcKmrYsf1trm9hOKNXAakGv8pLRfzH7nvI1BKoHPDFULGDsJY49AHVSI6hueaYtQFK8QaWkk7VBtyRPmw",
            "p": "vlJQSmKS60pJHqluTJLmC_khSaNtzkhPsRih8SiByccJqLM3FwGVDNUpRAZ8EJMWWbZRd-M964i2hC31c8VMHklfzzwerW6RtmElpPlxv8DInooz-ZE8mLwax55sYy4tjApg80kCO836w1G5SyDH29SKpu3__L2CQyjqPijRhOc",
            "q": "1oQipBVk96E-fifFYG2vN8XFeuCj5BQ4nwVdY0Y0_Khtav03JzBF2WUih9Znu-VbIBt3iB6lVNlYCieiQwb70kpoVT2cTbGKmNfIDyUjX9QVHmjYWCV29gutrvcqv3wLdyys3SB41EzWdT91JIFp4z_r8NT8zeeLaVhXKewvFS0",
            "dq": "HVPzaHuEUla5NIY7dfOJARcI6MPNpGEfXJ5fJjNzCxf73aTA5Zqz8gThs7CcfhPdYYZf0TxfXjpYzwqcJI3P3_BMU1sZA4ZCbKMTtv5c170nJgEvkt2MZhcyp7kjHwrWhnSVLaZC3sOijmUent8Smv8iQsrbxUrixIRPZmvkBAE",
            "dp": "mAOzMdbONrUc9iqqeOsUaBfTKLgqqotDa9aa8r5B_GLIKkELDYsr_BX-YeE0EyEIxxtCsxmEia6m6aiz1oaOJ9q_dg01C523MQ8jPEQpQNnA5DDLFtmUpwIH-c1mEUn_A03-5hM4f4AkfQG3mHRUbhezr2WGA99yPiZeAswjnZ0",
            "qi": "WG_uAGyc2dN3IlE4Mg4eHdDKJdHTpACvvzzP0zybISP1dWOa3JsWTzV61VIbm07pp1UXULFFkD-WTrgs6c09rqB1K7XK7tMryl-BMP-Rc-kUUWjDXnGrYBX7NyP2rPlIQL1OFgRgdTeLUDYoja3QwlmPz6KdOwHg5dORIB05kys",
        }
    )

    JWT_AUTH["JWT_PUBLIC_SIGNING_JWK_SET"] = json.dumps(
        {
            "keys": [
                {
                    "kid": "openedx",
                    "kty": "RSA",
                    "e": "AQAB",
                    "n": "n3sLUIAOxgbXonraCzXT_9ehTgxMjDjJG8GefdVZTuFrsCXvQqPLmgEJm1ppm0Fki0JPDC4wdKMqK-l-Ei7JjkNsSuZFIjo95lGoRrUqo8pj2fKFKo61IN-hPpUbz12gYmj564ZjbwcWbSD6mJTa0a9GbijNY0po53oPpHuHSTn9e8c4jshA7AoJN2DH9bjVkf0iQd3xYSr6033tnT4el1otiTfMZ2zVxmYLMZgdooJH25LW92vU9EPKD-xNfOG5Nzj9sPcKmrYsf1trm9hOKNXAakGv8pLRfzH7nvI1BKoHPDFULGDsJY49AHVSI6hueaYtQFK8QaWkk7VBtyRPmw",
                }
            ]
        }
    )

    JWT_AUTH["JWT_ISSUERS"] = [
        {
            "ISSUER": "https://lms.lidoku.com/oauth2",
            "AUDIENCE": "openedx",
            "SECRET_KEY": "4PusB1OKkVSa17jgaLJZ7yh8"
        }
    ]


    # Enable/Disable some features globally

    FEATURES["ENABLE_DISCUSSION_SERVICE"] = False

    FEATURES["PREVENT_CONCURRENT_LOGINS"] = False

    FEATURES["ENABLE_CORS_HEADERS"] = True


    # CORS

    CORS_ALLOW_CREDENTIALS = True

    CORS_ORIGIN_ALLOW_ALL = False

    CORS_ALLOW_INSECURE = False

    # Note: CORS_ALLOW_HEADERS is intentionally not defined here, because it
    should

    # be consistent across deployments, and is therefore set in edx-platform.


    # Add your MFE and third-party app domains here

    CORS_ORIGIN_WHITELIST = []


    # Disable codejail support

    # explicitely configuring python is necessary to prevent unsafe calls

    import codejail.jail_code

    codejail.jail_code.configure("python", "nonexistingpythonbinary", user=None)

    # another configuration entry is required to override prod/dev settings

    CODE_JAIL = {
        "python_bin": "nonexistingpythonbinary",
        "user": None,
    }


    OPENEDX_LEARNING = {
        'MEDIA': {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {
                "location": "/openedx/media-private/openedx-learning",
            }
        }
    }



    ######## End of settings common to LMS and CMS


    ######## Common CMS settings

    STUDIO_NAME = "Lindokedx - Studio"


    CACHES["staticfiles"] = {
        "KEY_PREFIX": "staticfiles_cms",
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "staticfiles_cms",
    }


    # Authentication

    SOCIAL_AUTH_EDX_OAUTH2_SECRET = "NCao2vNSdGf2GwNMD4XECKlM"

    SOCIAL_AUTH_EDX_OAUTH2_URL_ROOT = "http://lms:8000"

    SOCIAL_AUTH_REDIRECT_IS_HTTPS = False  # scheme is correctly included in
    redirect_uri

    SESSION_COOKIE_NAME = "studio_session_id"


    MAX_ASSET_UPLOAD_FILE_SIZE_IN_MB = 100


    FRONTEND_LOGIN_URL = LMS_ROOT_URL + '/login'

    FRONTEND_REGISTER_URL = LMS_ROOT_URL + '/register'


    # Enable "reindex" button

    FEATURES["ENABLE_COURSEWARE_INDEX"] = True


    # Create folders if necessary

    for folder in [LOG_DIR, MEDIA_ROOT, STATIC_ROOT, ORA2_FILEUPLOAD_ROOT]:
        if not os.path.exists(folder):
            os.makedirs(folder, exist_ok=True)



    ######## End of common CMS settings


    LMS_BASE = "lms.lidoku.com:8000"

    LMS_ROOT_URL = "http://" + LMS_BASE


    CMS_BASE = "cms.lidoku.com:8001"

    CMS_ROOT_URL = "http://" + CMS_BASE


    MEILISEARCH_PUBLIC_URL = "https://meilisearch.lms.lidoku.com:7700"


    # Authentication

    SOCIAL_AUTH_EDX_OAUTH2_KEY = "cms-sso-dev"

    SOCIAL_AUTH_EDX_OAUTH2_PUBLIC_URL_ROOT = LMS_ROOT_URL


    FEATURES["PREVIEW_LMS_BASE"] = "preview.lms.lidoku.com:8000"


    # Setup correct webpack configuration file for development

    WEBPACK_CONFIG_PATH = "webpack.dev.config.js"



    # MFE-specific settings


    COURSE_AUTHORING_MICROFRONTEND_URL =
    "http://apps.lms.lidoku.com:2001/authoring"

    CORS_ORIGIN_WHITELIST.append("http://apps.lms.lidoku.com:2001")

    LOGIN_REDIRECT_WHITELIST.append("apps.lms.lidoku.com:2001")

    CSRF_TRUSTED_ORIGINS.append("http://apps.lms.lidoku.com:2001")
  production.py: >-
    # -*- coding: utf-8 -*-

    import os

    from cms.envs.production import *


    ####### Settings common to LMS and CMS

    import json

    import os


    from xmodule.modulestore.modulestore_settings import
    update_module_store_settings


    # Mongodb connection parameters: simply modify `mongodb_parameters` to
    affect all connections to MongoDb.

    mongodb_parameters = {
        "db": "openedx",
        "host": "mongodb",
        "port": 27017,
        "user": None,
        "password": None,
        # Connection/Authentication
        "connect": False,
        "ssl": False,
        "authsource": "admin",
        "replicaSet": None,
        
    }

    DOC_STORE_CONFIG = mongodb_parameters

    CONTENTSTORE = {
        "ENGINE": "xmodule.contentstore.mongo.MongoContentStore",
        "ADDITIONAL_OPTIONS": {},
        "DOC_STORE_CONFIG": DOC_STORE_CONFIG
    }

    # Load module store settings from config files

    update_module_store_settings(MODULESTORE,
    doc_store_settings=DOC_STORE_CONFIG)

    DATA_DIR = "/openedx/data/modulestore"


    for store in MODULESTORE["default"]["OPTIONS"]["stores"]:
       store["OPTIONS"]["fs_root"] = DATA_DIR

    # Behave like memcache when it comes to connection errors

    DJANGO_REDIS_IGNORE_EXCEPTIONS = True


    # Meilisearch connection parameters

    MEILISEARCH_ENABLED = True

    MEILISEARCH_URL = "http://meilisearch:7700"

    MEILISEARCH_PUBLIC_URL = "https://meilisearch.lms.lidoku.com"

    MEILISEARCH_INDEX_PREFIX = "tutor_"

    MEILISEARCH_API_KEY =
    "2e08fe0c4e82fb0a9a7740e3fec5b81c746ed8f0f50f8d1ee9ae5538e9582e15"

    MEILISEARCH_MASTER_KEY = "IW3WJpg8EWM2DxQ9gsrfQHEP"

    SEARCH_ENGINE = "search.meilisearch.MeilisearchEngine"


    # Common cache config

    CACHES = {
        "default": {
            "KEY_PREFIX": "default",
            "VERSION": "1",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "general": {
            "KEY_PREFIX": "general",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "mongo_metadata_inheritance": {
            "KEY_PREFIX": "mongo_metadata_inheritance",
            "TIMEOUT": 300,
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "configuration": {
            "KEY_PREFIX": "configuration",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "celery": {
            "KEY_PREFIX": "celery",
            "TIMEOUT": 7200,
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "course_structure_cache": {
            "KEY_PREFIX": "course_structure",
            "TIMEOUT": 604800, # 1 week
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        },
        "ora2-storage": {
            "KEY_PREFIX": "ora2-storage",
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://@redis:6379/1",
        }
    }


    # The default Django contrib site is the one associated to the LMS domain
    name. 1 is

    # usually "example.com", so it's the next available integer.

    SITE_ID = 2


    # Contact addresses

    CONTACT_MAILING_ADDRESS = "Lindokedx - https://lms.lidoku.com"

    DEFAULT_FROM_EMAIL = ENV_TOKENS.get("DEFAULT_FROM_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    DEFAULT_FEEDBACK_EMAIL = ENV_TOKENS.get("DEFAULT_FEEDBACK_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    SERVER_EMAIL = ENV_TOKENS.get("SERVER_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    TECH_SUPPORT_EMAIL = ENV_TOKENS.get("TECH_SUPPORT_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    CONTACT_EMAIL = ENV_TOKENS.get("CONTACT_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    BUGS_EMAIL = ENV_TOKENS.get("BUGS_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    UNIVERSITY_EMAIL = ENV_TOKENS.get("UNIVERSITY_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    PRESS_EMAIL = ENV_TOKENS.get("PRESS_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    PAYMENT_SUPPORT_EMAIL = ENV_TOKENS.get("PAYMENT_SUPPORT_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    BULK_EMAIL_DEFAULT_FROM_EMAIL =
    ENV_TOKENS.get("BULK_EMAIL_DEFAULT_FROM_EMAIL", ENV_TOKENS["CONTACT_EMAIL"])

    API_ACCESS_MANAGER_EMAIL = ENV_TOKENS.get("API_ACCESS_MANAGER_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])

    API_ACCESS_FROM_EMAIL = ENV_TOKENS.get("API_ACCESS_FROM_EMAIL",
    ENV_TOKENS["CONTACT_EMAIL"])


    # Get rid completely of coursewarehistoryextended, as we do not use the CSMH
    database

    INSTALLED_APPS.remove("lms.djangoapps.coursewarehistoryextended")

    DATABASE_ROUTERS.remove(
        "openedx.core.lib.django_courseware_routers.StudentModuleHistoryExtendedRouter"
    )


    # Set uploaded media file path

    MEDIA_ROOT = "/openedx/media/"


    # Video settings

    VIDEO_IMAGE_SETTINGS["STORAGE_KWARGS"]["location"] = MEDIA_ROOT

    VIDEO_TRANSCRIPTS_SETTINGS["STORAGE_KWARGS"]["location"] = MEDIA_ROOT


    GRADES_DOWNLOAD = {
        "STORAGE_TYPE": "",
        "STORAGE_KWARGS": {
            "base_url": "/media/grades/",
            "location": "/openedx/media/grades",
        },
    }


    # ORA2

    ORA2_FILEUPLOAD_BACKEND = "filesystem"

    ORA2_FILEUPLOAD_ROOT = "/openedx/data/ora2"

    FILE_UPLOAD_STORAGE_BUCKET_NAME = "openedxuploads"

    ORA2_FILEUPLOAD_CACHE_NAME = "ora2-storage"


    # Change syslog-based loggers which don't work inside docker containers

    LOGGING["handlers"]["local"] = {
        "class": "logging.handlers.WatchedFileHandler",
        "filename": os.path.join(LOG_DIR, "all.log"),
        "formatter": "standard",
    }

    LOGGING["handlers"]["tracking"] = {
        "level": "DEBUG",
        "class": "logging.handlers.WatchedFileHandler",
        "filename": os.path.join(LOG_DIR, "tracking.log"),
        "formatter": "standard",
    }

    LOGGING["loggers"]["tracking"]["handlers"] = ["console", "local",
    "tracking"]


    # Silence some loggers (note: we must attempt to get rid of these when
    upgrading from one release to the next)

    LOGGING["loggers"]["blockstore.apps.bundles.storage"] = {"handlers":
    ["console"], "level": "WARNING"}


    # These warnings are visible in simple commands and init tasks

    import warnings


    # REMOVE-AFTER-V20: check if we can remove these lines after upgrade.

    from django.utils.deprecation import RemovedInDjango50Warning,
    RemovedInDjango51Warning

    # RemovedInDjango5xWarning: 'xxx' is deprecated. Use 'yyy' in 'zzz' instead.

    warnings.filterwarnings("ignore", category=RemovedInDjango50Warning)

    warnings.filterwarnings("ignore", category=RemovedInDjango51Warning)

    # DeprecationWarning: 'imghdr' is deprecated and slated for removal in
    Python 3.13

    warnings.filterwarnings("ignore", category=DeprecationWarning,
    module="pgpy.constants")


    # Email

    EMAIL_USE_SSL = False

    # Forward all emails from edX's Automated Communication Engine (ACE) to
    django.

    ACE_ENABLED_CHANNELS = ["django_email"]

    ACE_CHANNEL_DEFAULT_EMAIL = "django_email"

    ACE_CHANNEL_TRANSACTIONAL_EMAIL = "django_email"

    EMAIL_FILE_PATH = "/tmp/openedx/emails"


    # Language/locales

    LANGUAGE_COOKIE_NAME = "openedx-language-preference"


    # Allow the platform to include itself in an iframe

    X_FRAME_OPTIONS = "SAMEORIGIN"



    JWT_AUTH["JWT_ISSUER"] = "https://lms.lidoku.com/oauth2"

    JWT_AUTH["JWT_AUDIENCE"] = "openedx"

    JWT_AUTH["JWT_SECRET_KEY"] = "4PusB1OKkVSa17jgaLJZ7yh8"

    JWT_AUTH["JWT_PRIVATE_SIGNING_JWK"] = json.dumps(
        {
            "kid": "openedx",
            "kty": "RSA",
            "e": "AQAB",
            "d": "RH_AE1p9ffbwZZxozQnYvfnrEa_crRmy35YhMiESE_xkmashgjkCOWqaqryBwaqrudjIRQ4Nx_tRIL1QZhTsg4tYFy-ioBnt_mAya_RilSlYDAPLyMS07aLACjZXVJD9U2eNeOknCkg8DLFukVzWQ9wJ30TtOul593qI_3gDWqK85841aGklBwj98EENZB9cAhOIPf5dTutjcUMoHkEJz1APCPtBdqbxAfdAHmy4s9218aRdDOcWEVqGBflRJBdZg0H0OnI0n884qIh1mHrjpbCQJIKqsAKsEEVlW-hfELOcK2zeqja6dW5MWlNS9JJ6sXZnugbRGRZ4-cwCvU6jKQ",
            "n": "n3sLUIAOxgbXonraCzXT_9ehTgxMjDjJG8GefdVZTuFrsCXvQqPLmgEJm1ppm0Fki0JPDC4wdKMqK-l-Ei7JjkNsSuZFIjo95lGoRrUqo8pj2fKFKo61IN-hPpUbz12gYmj564ZjbwcWbSD6mJTa0a9GbijNY0po53oPpHuHSTn9e8c4jshA7AoJN2DH9bjVkf0iQd3xYSr6033tnT4el1otiTfMZ2zVxmYLMZgdooJH25LW92vU9EPKD-xNfOG5Nzj9sPcKmrYsf1trm9hOKNXAakGv8pLRfzH7nvI1BKoHPDFULGDsJY49AHVSI6hueaYtQFK8QaWkk7VBtyRPmw",
            "p": "vlJQSmKS60pJHqluTJLmC_khSaNtzkhPsRih8SiByccJqLM3FwGVDNUpRAZ8EJMWWbZRd-M964i2hC31c8VMHklfzzwerW6RtmElpPlxv8DInooz-ZE8mLwax55sYy4tjApg80kCO836w1G5SyDH29SKpu3__L2CQyjqPijRhOc",
            "q": "1oQipBVk96E-fifFYG2vN8XFeuCj5BQ4nwVdY0Y0_Khtav03JzBF2WUih9Znu-VbIBt3iB6lVNlYCieiQwb70kpoVT2cTbGKmNfIDyUjX9QVHmjYWCV29gutrvcqv3wLdyys3SB41EzWdT91JIFp4z_r8NT8zeeLaVhXKewvFS0",
            "dq": "HVPzaHuEUla5NIY7dfOJARcI6MPNpGEfXJ5fJjNzCxf73aTA5Zqz8gThs7CcfhPdYYZf0TxfXjpYzwqcJI3P3_BMU1sZA4ZCbKMTtv5c170nJgEvkt2MZhcyp7kjHwrWhnSVLaZC3sOijmUent8Smv8iQsrbxUrixIRPZmvkBAE",
            "dp": "mAOzMdbONrUc9iqqeOsUaBfTKLgqqotDa9aa8r5B_GLIKkELDYsr_BX-YeE0EyEIxxtCsxmEia6m6aiz1oaOJ9q_dg01C523MQ8jPEQpQNnA5DDLFtmUpwIH-c1mEUn_A03-5hM4f4AkfQG3mHRUbhezr2WGA99yPiZeAswjnZ0",
            "qi": "WG_uAGyc2dN3IlE4Mg4eHdDKJdHTpACvvzzP0zybISP1dWOa3JsWTzV61VIbm07pp1UXULFFkD-WTrgs6c09rqB1K7XK7tMryl-BMP-Rc-kUUWjDXnGrYBX7NyP2rPlIQL1OFgRgdTeLUDYoja3QwlmPz6KdOwHg5dORIB05kys",
        }
    )

    JWT_AUTH["JWT_PUBLIC_SIGNING_JWK_SET"] = json.dumps(
        {
            "keys": [
                {
                    "kid": "openedx",
                    "kty": "RSA",
                    "e": "AQAB",
                    "n": "n3sLUIAOxgbXonraCzXT_9ehTgxMjDjJG8GefdVZTuFrsCXvQqPLmgEJm1ppm0Fki0JPDC4wdKMqK-l-Ei7JjkNsSuZFIjo95lGoRrUqo8pj2fKFKo61IN-hPpUbz12gYmj564ZjbwcWbSD6mJTa0a9GbijNY0po53oPpHuHSTn9e8c4jshA7AoJN2DH9bjVkf0iQd3xYSr6033tnT4el1otiTfMZ2zVxmYLMZgdooJH25LW92vU9EPKD-xNfOG5Nzj9sPcKmrYsf1trm9hOKNXAakGv8pLRfzH7nvI1BKoHPDFULGDsJY49AHVSI6hueaYtQFK8QaWkk7VBtyRPmw",
                }
            ]
        }
    )

    JWT_AUTH["JWT_ISSUERS"] = [
        {
            "ISSUER": "https://lms.lidoku.com/oauth2",
            "AUDIENCE": "openedx",
            "SECRET_KEY": "4PusB1OKkVSa17jgaLJZ7yh8"
        }
    ]


    # Enable/Disable some features globally

    FEATURES["ENABLE_DISCUSSION_SERVICE"] = False

    FEATURES["PREVENT_CONCURRENT_LOGINS"] = False

    FEATURES["ENABLE_CORS_HEADERS"] = True


    # CORS

    CORS_ALLOW_CREDENTIALS = True

    CORS_ORIGIN_ALLOW_ALL = False

    CORS_ALLOW_INSECURE = False

    # Note: CORS_ALLOW_HEADERS is intentionally not defined here, because it
    should

    # be consistent across deployments, and is therefore set in edx-platform.


    # Add your MFE and third-party app domains here

    CORS_ORIGIN_WHITELIST = []


    # Disable codejail support

    # explicitely configuring python is necessary to prevent unsafe calls

    import codejail.jail_code

    codejail.jail_code.configure("python", "nonexistingpythonbinary", user=None)

    # another configuration entry is required to override prod/dev settings

    CODE_JAIL = {
        "python_bin": "nonexistingpythonbinary",
        "user": None,
    }


    OPENEDX_LEARNING = {
        'MEDIA': {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {
                "location": "/openedx/media-private/openedx-learning",
            }
        }
    }



    ######## End of settings common to LMS and CMS


    ######## Common CMS settings

    STUDIO_NAME = "Lindokedx - Studio"


    CACHES["staticfiles"] = {
        "KEY_PREFIX": "staticfiles_cms",
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "staticfiles_cms",
    }


    # Authentication

    SOCIAL_AUTH_EDX_OAUTH2_SECRET = "NCao2vNSdGf2GwNMD4XECKlM"

    SOCIAL_AUTH_EDX_OAUTH2_URL_ROOT = "http://lms:8000"

    SOCIAL_AUTH_REDIRECT_IS_HTTPS = False  # scheme is correctly included in
    redirect_uri

    SESSION_COOKIE_NAME = "studio_session_id"


    MAX_ASSET_UPLOAD_FILE_SIZE_IN_MB = 100


    FRONTEND_LOGIN_URL = LMS_ROOT_URL + '/login'

    FRONTEND_REGISTER_URL = LMS_ROOT_URL + '/register'


    # Enable "reindex" button

    FEATURES["ENABLE_COURSEWARE_INDEX"] = True


    # Create folders if necessary

    for folder in [LOG_DIR, MEDIA_ROOT, STATIC_ROOT, ORA2_FILEUPLOAD_ROOT]:
        if not os.path.exists(folder):
            os.makedirs(folder, exist_ok=True)



    ######## End of common CMS settings


    ALLOWED_HOSTS = [
        ENV_TOKENS.get("CMS_BASE"),
        "cms",
    ]

    CORS_ORIGIN_WHITELIST.append("https://cms.lidoku.com")


    # Authentication

    SOCIAL_AUTH_EDX_OAUTH2_KEY = "cms-sso"

    SOCIAL_AUTH_EDX_OAUTH2_PUBLIC_URL_ROOT = "https://lms.lidoku.com"


    # MFE-specific settings


    COURSE_AUTHORING_MICROFRONTEND_URL = "https://apps.lms.lidoku.com/authoring"



    LOGIN_REDIRECT_WHITELIST.append("apps.lms.lidoku.com")

    CORS_ORIGIN_WHITELIST.append("https://apps.lms.lidoku.com")

    CSRF_TRUSTED_ORIGINS.append("https://apps.lms.lidoku.com")
  test.py: |-
    from cms.envs.test import *

    # Fix MongoDb connection credentials
    DOC_STORE_CONFIG["user"] = None
    DOC_STORE_CONFIG["password"] = None
